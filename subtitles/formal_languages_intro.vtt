WEBVTT

NOTE
Computer Science Education Research,
University of Canterbury, New Zealand
Subtitle file for the video "Formal Languages"
Author: Alasdair Smith
Date: 13/02/2017

00:01.000 --> 00:02.400
Formal Languages

00:02.400 --> 00:05.000
So let's talk about Formal Languages.

00:05.000 --> 00:07.000
Oops, hold on a second.

NOTE
'Oops' is actually said earlier than its subtitle
but it fits better where it is

00:07.000 --> 00:09.400
When you read instructions in a human language,

00:09.400 --> 00:13.200
you can generally understand what's written
even if there are small errors.

00:13.200 --> 00:19.200
But for a computer, the instructions are so precise that
even one small error can prevent it from working.

00:19.200 --> 00:23.200
It's not that they're stupid,
[uhh] they are a bit stupid.

00:23.200 --> 00:26.800
Anyway, even in day to day use
we have situations

00:26.800 --> 00:30.400
where something absolutely has
to be formatted correctly.

00:30.400 --> 00:34.700
You're not going to get what you want if you don't
follow the rules when entering email addresses,

00:34.700 --> 00:36.000
<i>ERROR invalid email</i>

NOTE
shortened 'ERROR email address invalid format' to 'ERROR invalid email'

00:36.000 --> 00:37.600
typing in numbers,

00:37.600 --> 00:39.400
<i>ERROR invalid amount</i>

00:39.400 --> 00:42.000
or entering formulas into spreadsheets.

00:42.000 --> 00:43.600
<b>#ERROR!</b>

00:43.600 --> 00:48.200
What we need is a way to write down rules
for what is acceptable and what isn't.

00:48.200 --> 00:50.800
This is what Formal Languages can do for us.

00:50.800 --> 00:53.600
Let's get back to the backend.

00:53.600 --> 00:57.800
Formal Languages are even involved in...

00:57.800 --> 01:01.600
Formal Languages are even involved in
delivering this video to you.

01:01.600 --> 01:06.600
They're used to specify the format of the
address of the page that this video is in;

01:06.600 --> 01:09.000
the structure of the page itself;

01:09.000 --> 01:12.600
the file format that this video is stored in;

01:12.600 --> 01:15.200
the software that is running this video;

01:15.200 --> 01:20.800
and even the hardware on your computer that is
running the software to render this video.

01:20.800 --> 01:25.200
Computer Scientists use Formal Languages
to explore all sorts of issues,

01:25.200 --> 01:29.400
even including the limits of what can
ever be done with computers.

01:29.400 --> 01:30.600
Here's a fun fact:

01:30.600 --> 01:35.200
we can describe any computer or
digital device using a Formal Language.

01:35.200 --> 01:40.400
In fact, Formal Languages even show us
the very limits of what can be computed.

01:40.400 --> 01:44.400
And we can prove that there really are
mathematical problems

01:44.400 --> 01:47.000
that can never be solved by a computer.

01:47.000 --> 01:51.000
Woah, mind blown.
<01:49.200><i>Boom</i>

01:51.000 --> 01:57.600
But, I'm getting ahead of myself, Formal Languages are
basically a bunch of reasonably simple ideas

01:57.600 --> 02:00.200
that have unreasonably strange names.

02:00.200 --> 02:01.800
Regular Expressions

02:01.800 --> 02:03.600
Finite State Automata

02:03.600 --> 02:05.200
Context Free Grammars

02:05.200 --> 02:08.200
These techniques are used all the time
in Computer Science,

02:08.200 --> 02:09.800
and are worth getting to know.

02:09.800 --> 02:11.800
Formal Languages
