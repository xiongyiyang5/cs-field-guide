// Generated by CoffeeScript 1.10.0
(function() {
  var ALPHABET, encrypt, eventStream, keyCodes, shift, singleEvent, updateTextArea,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

  keyCodes = {
    BACKSPACE: 8,
    COMMA: 188,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    LEFT: 37,
    NUMPAD_ADD: 107,
    NUMPAD_DECIMAL: 110,
    NUMPAD_DIVIDE: 111,
    NUMPAD_ENTER: 108,
    NUMPAD_MULTIPLY: 106,
    NUMPAD_SUBTRACT: 109,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SPACE: 32,
    TAB: 9,
    UP: 38
  };

  singleEvent = function(selector, eventType) {
    if (selector == null) {
      selector = "document";
    }
    if (eventType == null) {
      eventType = "click";
    }

    /* Returns a promise for a single event on a single element
        with the event handler supplied by jQuery
     */
    return new Promise(function(resolve) {
      return $(selector).one(function(event) {
        return resolve(event);
      });
    });
  };

  eventStream = function() {
    var events, handler, selector, selectors, subscribers;
    selectors = arguments[0], events = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (selectors == null) {
      selectors = "document";
    }

    /* Returns an Observable which can be subscribed to for the given events
        on a given element
     */
    subscribers = new Set();
    if (selectors.join != null) {
      selector = selectors.join(", ");
    } else {
      selector = selectors;
    }
    handler = function(event) {
      return subscribers.forEach(function(subscriber) {
        return subscriber.next(event);
      });
    };
    $(selector).on(events.join(' '), handler);
    return new Observable(function(subscriber) {
      subscribers.add(subscriber);
      return function() {
        return subscribers["delete"](subscriber);
      };
    });
  };

  updateTextArea = function(element, keyCode) {

    /* Updates a TextArea with the new key, this function exists mainly
        to process backspaces in the textarea
     */
    var new_char, new_text, original, ref;
    original = $(element).val();
    if ((ref = event.keyCode) === keyCodes.BACKSPACE || ref === keyCodes.DELETE) {
      if (original.length > 0) {
        new_text = original.slice(0, original.length - 1);
      }
    } else {
      new_char = String.fromCharCode(event.keyCode).toUpperCase();
      new_text = original + new_char;
    }
    return $(element).val(new_text);
  };

  shift = function(character, rotation) {
    if (rotation == null) {
      rotation = 3;
    }

    /* This shifts a character by rotation characters using the standard
        caesar cipher
     */
    return ALPHABET;
  };

  encrypt = function(text, rotation) {
    var char, i, index, len, result;
    if (rotation == null) {
      rotation = 3;
    }
    result = '';
    for (i = 0, len = text.length; i < len; i++) {
      char = text[i];
      if (indexOf.call(ALPHABET, char) >= 0) {
        index = ALPHABET.indexOf(char);
        result += ALPHABET[index + modulo(rotation, ALPHABET.length)];
      }
    }
    return result;
  };

  eventStream('#caesar-plaintext', 'keydown').subscribe({

    /* Respond to all keypresses and update both boxes appropriately */
    next: function(event) {
      event.preventDefault();
      updateTextArea("#caesar-plaintext", event.keyCode);
      return $('#caesar-ciphertext').val(encrypt($('#caesar-plaintext').val()));
    }
  });

}).call(this);
